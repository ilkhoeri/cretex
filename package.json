{
  "name": "cretex",
  "version": "0.0.1",
  "license": "MIT",
  "description": "Dynamically utility for combining different types of values ​​into a single value.",
  "author": "Ilham Khoeri <ilkhoeri@gmail.com>",
  "bugs": {
    "url": "https://github.com/ilkhoeri/cretex/issues"
  },
  "homepage": "https://github.com/ilkhoeri/cretex#readme",
  "repository": {
    "type": "git",
    "url": "https://github.com/ilkhoeri/cretex.git"
  },
  "funding": "https://github.com/sponsors/ilkhoeri",
  "peerDependencies": {
    "tailwind-merge": "latest"
  },
  "devDependencies": {
    "@babel/core": "^7.26.0",
    "@babel/preset-env": "^7.26.0",
    "@babel/preset-typescript": "^7.26.0",
    "@jest/globals": "^29.7.0",
    "@rollup/plugin-typescript": "^12.1.2",
    "@swc/jest": "^0.2.37",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.7",
    "@typescript-eslint/eslint-plugin": "^8.21.0",
    "@typescript-eslint/parser": "^8.21.0",
    "babel-jest": "^29.7.0",
    "chalk": "^5.4.1",
    "dependency-cruiser": "^16.9.0",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-ban": "^2.0.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-simple-import-sort": "^12.1.1",
    "eslint-plugin-unused-imports": "^4.1.4",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "nodemon": "^3.1.9",
    "ora": "^8.1.1",
    "prettier": "^3.3.3",
    "rollup": "^4.31.0",
    "ts-jest": "^29.2.5",
    "tslib": "^2.8.1",
    "tsx": "^4.19.2",
    "typescript": "^5.7.3",
    "vitest": "^3.0.4"
  },
  "main": "./lib/index.js",
  "module": "./lib/index.mjs",
  "types": "./index.d.ts",
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "require": "./lib/index.js",
      "import": "./lib/index.mjs"
    },
    "./package.json": "./package.json"
  },
  "files": [
    "/lib",
    "/index.d.ts"
  ],
  "keywords": [
    "string",
    "variant",
    "class-variant",
    "object-variant",
    "classes",
    "className",
    "classNames",
    "classList",
    "twMerge",
    "clsx",
    "cva",
    "css",
    "react",
    "size",
    "converter"
  ],
  "lint-staged": {
    "src/*.ts": [
      "eslint --cache --fix",
      "prettier --ignore-unknown --write"
    ],
    "*.md": [
      "prettier --ignore-unknown --write"
    ]
  },
  "scripts": {
    "prettier:check": "prettier --check src deno *.md --no-error-on-unmatched-pattern",
    "prettier:fix": "prettier --write src deno *.md --ignore-unknown --no-error-on-unmatched-pattern",
    "prettier": "bun run prettier:check && bun run prettier:fix",
    "lint:check": "eslint --cache src",
    "lint:fix": "eslint --cache --fix src",
    "check": "bun lint:check && bun prettier:check",
    "fix": "bun lint:fix && bun prettier:fix",
    "clean": "rm -rf lib/* deno/lib/*",
    "build": "bun run clean && bun run build:cjs && bun run build:esm && bun run build:deno",
    "build:deno": "bun run ./script/info.ts deno && node ./configs/deno-build.mjs && cp ./README.md ./deno/lib",
    "build:esm": "bun run ./script/info.ts esm && rollup --config ./configs/rollup.config.mjs --compact",
    "build:cjs": "bun run ./script/info.ts cjs && tsc -p ./configs/tsconfig.cjs.json",
    "build:types": "tsc -p ./configs/tsconfig.types.json",
    "build:test": "tsc -p ./configs/tsconfig.test.json",
    "test:watch": "bun test:ts-jest --watch",
    "test": "bun test:ts-jest",
    "test:babel": "jest --coverage --config ./configs/babel-jest.config.json",
    "test:bun": "bun test src/",
    "test:vitest": "npx vitest --config ./configs/vitest.config.ts",
    "test:ts-jest": "npx jest --config ./configs/ts-jest.config.json",
    "test:jest": "jest --coverage",
    "test:swc": "npx jest --config ./configs/swc-jest.config.json",
    "test:deno": "cd deno && deno test",
    "prepare:test": "husky .husky/pre-publish \"bun test\"",
    "prepare": "husky",
    "lint": "eslint src --cache",
    "format": "prettier src",
    "typecheck": "tsc --noEmit",
    "play": "nodemon -e ts -w . -x tsx playground.ts",
    "depcruise": "depcruise -c .dependency-cruiser.js src",
    "minify": "tsx ./script/minify.ts"
  },
  "sideEffects": false,
  "support": {
    "backing": {
      "npm-funding": true
    }
  }
}
